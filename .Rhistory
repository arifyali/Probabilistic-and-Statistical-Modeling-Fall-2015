}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x){
return(matrix(
c(6*t+1/x[1]^2+1/(x[1]-1)^2,
-2*t,
-2*t,
6*t+1/x[2]^2+1/(x[2]-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
### Part B
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b_new
as.list(b_new)
b_new = list(b_new)
b_new
b_new[[2]] = c(1,1)
b_new
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:14)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:4)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
plot(b)
sapply(b, function(x){x[1]})
sapply(b, function(x){x[2]})
?plot
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}), xlab = "x", ylab = "y", type = "l")
plot(c(0,1),c(0,1), xlab = "x1", ylab = "x2")
lines(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}))
?lines
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}),xlim = c(0,2), ylim = c(0,2), xlab = "x1", ylab = "x2")
rect(0,0,1,1)
?lines
lines(c(0, .5), c(.5,.5))
lines(c(0, 1), c(.5,.5))
political_data = read.csv("OpenSecretsFECIndustry")
setwd("Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data = read.csv("OpenSecretsFECIndustry")
political_data = read.csv("OpenSecretsFECIndustry.csv")
View(political_data)
mapply(is.numeric, political_data)
numeric_political_data = political_data[,mapply(is.numeric, political_data)]
View(numeric_political_data)
political_data = read.csv("OpenSecretsFECIndustry.csv")
View(numeric_political_data)
View(political_data)
Logit_pol_data = political_data[!duplicated(political_data["STATE", "DISTRICT", "CANDIDATE"]),]
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE")]),]
View(Logit_pol_data)
model <- glm(PERCENT ~CANDTOTAL,,data=Logit_pol_data)
model
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE")]),]
Logit_pol_data$CANDTOTAL = Logit_pol_data$CANDTOTAL/max(Logit_pol_data$CANDTOTAL)
model <- glm(PERCENT ~CANDTOTAL,,data=Logit_pol_data)
model
View(Logit_pol_data)
?IQR
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE")]),]
# I'm standardizing the Candidate total contribution in order to better compare it to the vote percentages.
# Because this is a better representation of contribtuions compared to a ranking.
# Remove outliers does exactly what it is designed to, remove outliers. I found this on a stackoverflow board:
# http://stackoverflow.com/questions/4787332/how-to-remove-outliers-from-a-dataset
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
Logit_pol_data = Logit_pol_data[remove_outliers(Logit_pol_data$CANDTOTAL),]
Logit_pol_data = Logit_pol_data[remove_outliers(Logit_pol_data$PERCENT),]
Logit_pol_data$CANDTOTAL = Logit_pol_data$CANDTOTAL/max(Logit_pol_data$CANDTOTAL)
model <- glm(PERCENT ~CANDTOTAL,,data=Logit_pol_data)
model <- glm(PERCENT ~CANDTOTAL,data=Logit_pol_data)
View(Logit_pol_data)
aa$remove_outliers(Logit_pol_data$CANDTOTAL)
aa = remove_outliers(Logit_pol_data$CANDTOTAL)
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE")]),]
aa = remove_outliers(Logit_pol_data$CANDTOTAL)
aa = remove_outliers(Logit_pol_data$PERCENT)
Logit_pol_data$CANDTOTAL = Logit_pol_data$CANDTOTAL/max(Logit_pol_data$CANDTOTAL)
model <- glm(PERCENT ~CANDTOTAL,data=Logit_pol_data)
model$formula
model$model
model
model$residuals
hist(model$residuals)
?glm
summary(model)
political_data = read.csv("OpenSecretsFECIndustry.csv")
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/")
political_data = read.csv("OpenSecretsFECIndustry.csv")
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data = read.csv("OpenSecretsFECIndustry.csv")
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE")]),]
Logit_pol_data$CANDTOTAL = Logit_pol_data$CANDTOTAL/max(Logit_pol_data$CANDTOTAL)
model <- lm(PERCENT ~CANDTOTAL,data=Logit_pol_data)
summary(model)
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
setwd("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/")
GS2002 = read.csv("ChiharaHesterberg/GSS2002.csv")
X2GE = chisq.test(table(GS2002[,c("Gender", "Education")]))
X2GE$p.value
X2GE$parameter
X2HP = chisq.test(table(GS2002[,c("Happy", "PolParty")]))
X2HP$p.value
X2HP$parameter
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
setwd("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/")
GS2002 = read.csv("ChiharaHesterberg/GSS2002.csv")
X2GE = chisq.test(table(GS2002[,c("Gender", "Education")]))
X2GE$p.value
X2GE$parameter == prod(dim(table(GS2002[,c("Gender", "Education")]))-1)
X2HP = chisq.test(table(GS2002[,c("Happy", "PolParty")]))
X2HP$p.value
#X2HP$stdres
#X2HP$residuals
X2HP$parameter == prod(dim(table(GS2002[,c("Happy", "PolParty")]))-1)
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
mytable = table(Problem59)
expected = outer(rowSums(mytable), colSums(mytable))/sum(mytable)
myX2 <- function(table){sum((table - expected)^2/expected)}
X2 <- myX2(mytable)
X2permuted = function(dummy){
n <- nrow(Problem59)
permtable <- table(Problem59$X,Problem59$Y[sample(n,n,replace = F)])
return(myX2(permtable))
}
z <- replicate(10000,X2permuted(0))
hist(z)
abline(v = X2, col = 2, lwd = 2)
mean(z > X2)
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
mytable = table(Problem59)
expected = outer(rowSums(mytable), colSums(mytable))/sum(mytable)
expected
myX2 <- function(table){sum((table - expected)^2/expected)}
X2 <- myX2(mytable)
X2permuted = function(dummy){
n <- nrow(Problem59)
permtable <- table(Problem59$X,Problem59$Y[sample(n,n,replace = F)])
return(myX2(permtable))
}
z <- replicate(10000,X2permuted(0))
hist(z)
abline(v = X2, col = 2, lwd = 2)
mean(z > X2)
mean(z)
pchisq(.95,1)
qchisq(.95,1)
z <- replicate(100000, median(sample(Bangladesh$Arsenic,
length(Bangladesh$Arsenic),
replace = T)))
mean(z)-median(Bangladesh$Arsenic)
z <- replicate(100000, quantile(sample(Bangladesh$Arsenic,
length(Bangladesh$Arsenic),
replace = T),c(0.9)))
mean(z)-quantile(Bangladesh$Arsenic, .90)
boxplot(Bangladesh$Arsenic)
hist(Bangladesh$Arsenic)
mean(Bangladesh$Arsenic)
sd(Bangladesh$Arsenic)/sqrt(length(Bangladesh$Arsenic))
z <- replicate(100000, mean(sample(Bangladesh$Arsenic,
length(Bangladesh$Arsenic), replace = T)))
mean(z)
sd(z)
hist(z, breaks = 50)
qqnorm(z)
qqline(z)
?qqline
t_formula_confidence_interval = function(xhat, SD, ciLevel, sample_size){
t_score = qt(1-((1-ciLevel)/2), sample_size-1)
SE = SD/sqrt(sample_size)
return(c(xhat - t_score*SE, xhat + t_score*SE))
}
t_formula_confidence_interval(18.5, 5, .90, 20)
Spruce <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Spruce.csv")
View(Spruce)
boxplot(Spruce$Ht.change)
hist(Spruce$Ht.change)
hist(Spruce$Ht.change, breaks = 20)
t_formula_confidence_interval(mean(Spruce$Ht.change), sd(Spruce$Ht.change), .95, length(Spruce$Ht.change))
mean(Spruce$Ht.change)
qt(1-((1-.95)/2),length(Spruce$Ht.change) -1)
hist(CLEC)
Verizon <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Verizon.csv")
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
hist(ILEC)
alpha = .95
z <- replicate(10000,mean(sample(ILEC,size = length(ILEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(ILEC)$conf.int
library(e1071)
prop.test(c(28,13),c(250,250))$conf.int
Volleyball2009 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Volleyball2009.csv")
plot(Kills~Assts, data = Volleyball2009)
part_b = lm(Kills~Assts, data = Volleyball2009)
part_b$coefficients
summary(part_b)$r.squared
plot(Volleyball2009$Assts, resid(part_b), ylab = "Residuals")
abline(h=0)
lines(smooth.spline(Volleyball2009$Assts, resid(part_b), df = 3),
col="blue")
Maunaloa <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Maunaloa.csv")
plot(Level~Year, data = Maunaloa)
Maunaloa.lm = lm(Level~Year, data = Maunaloa)
Maunaloa.lm$coefficients
plot(Maunaloa.lm$residuals, Maunaloa$Year)
plot(Maunaloa.lm$residuals, Maunaloa$Year)
plot(Maunaloa$Year,Maunaloa.lm$residuals)
corrExerciseA <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/corrExerciseA.csv")
plot(Y~X, data = corrExerciseA)
cor(corrExerciseA$X, corrExerciseA$Y)
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="A",])
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="B",])
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="A",],
main = "A")
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="B",],
main = "B")
plot(Y~X, data = corrExerciseA)
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="A",],
main = "A")
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="B",],
main = "B")
NCBirths2004 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/NCBirths2004.csv")
plot(Weight~Gestation, data = NCBirths2004)
cor(NCBirths2004$Weight, NCBirths2004$Gestation)
part_b = lm(Weight~Gestation, data = NCBirths2004)
part_b$coefficients
summary(part_b)$r.squared
plot(NCBirths2004$Weight, part_b$coefficients)
part_b = lm(Weight~Gestation, data = NCBirths2004)
part_b$coefficients
plot(NCBirths2004$Weight, part_b$coefficients)
part_b$coefficients
plot(NCBirths2004$Weight, part_b$residuals)
plot(NCBirths2004$Gestation, part_b$residuals)
part_b
summary(part_b)
names(summary(part_b))
summary(part_b)$coefficients
summary(part_b)$coefficients[,2]
summary(part_b)$coefficients[,2][1]
summary(part_b)$coefficients[,2][2]
summary(part_b)$coefficients[,1][2] +
1.96*(-1,1)*summary(part_b)$coefficients[,2][2]
summary(part_b)$coefficients[,1][2] +
1.96*c(-1,1)*summary(part_b)$coefficients[,2][2]
Sodor.kidstemp = c(98.0, 98.9, 99.0, 98.9, 98.8,
98.6, 99.1, 98.9, 98.5, 98.9,
98.9, 98.4, 99.0, 99.2, 98.6,
98.8, 98.9, 98.7)
pt((mean(Sodor.kidstemp)-98.6)/
(sd(Sodor.kidstemp)/sqrt(length(Sodor.kidstemp))),
df = length(Sodor.kidstemp)-1, lower.tail = F)
Sodor.kidstemp.ci = replicate(10000, mean(sample(Sodor.kidstemp, length(Sodor.kidstemp), replace = T)))
quantile(Sodor.kidstemp.ci, c(0.05))
FlightDelays <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/FlightDelays.csv")
FlightDelays$Carrier = as.character(FlightDelays$Carrier)
boxplot(Delay~Carrier, data = FlightDelays)
hist(FlightDelays$Delay[FlightDelays$Carrier=="AA"])
hist(FlightDelays$Delay[FlightDelays$Carrier=="UA"])
qqnorm(FlightDelays$Delay[FlightDelays$Carrier=="AA"])
qqnorm(FlightDelays$Delay[FlightDelays$Carrier=="UA"])
t.test(FlightDelays$Delay[FlightDelays$Carrier=="AA"], FlightDelays$Delay[FlightDelays$Carrier=="UA"])$conf.int
aa = FlightDelays$Delay[FlightDelays$Carrier=="AA"]
ua = FlightDelays$Delay[FlightDelays$Carrier=="UA"]
BootstrapMedianDifference = replicate(10000,
median(sample(aa, length(aa)))-
median(sample(ua, length(ua))))
quantile(BootstrapMedianDifference, c(0.025,0.975))
max(BootstrapMedianDifference)
BootstrapMedianDifference = replicate(100000,
median(sample(aa, length(aa)))-
median(sample(ua, length(ua))))
quantile(BootstrapMedianDifference, c(0.025,0.975))
t.test(FlightDelays$Delay[FlightDelays$Carrier=="AA"], FlightDelays$Delay[FlightDelays$Carrier=="UA"])$conf.int
aa = FlightDelays$Delay[FlightDelays$Carrier=="AA"]
ua = FlightDelays$Delay[FlightDelays$Carrier=="UA"]
BootstrapMedianDifference = replicate(10000,
median(sample(aa, length(aa),replace = T))-
median(sample(ua, length(ua), replace = T)))
quantile(BootstrapMedianDifference, c(0.025,0.975))
Alelager <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Alelager.csv")
cor(Alelager$Alcohol, Alelager$Calories)
Alelager.bootstrap.ci = replicate(10000, cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories),replace = T)))
quantile(Alelager.bootstrap.ci, c(0.025, .975))
Alelager.bootstrap.ci = replicate(10000, cor(sample(Alelager$Alcohol, length(Alelager$Alcohol), replace = T), sample(Alelager$Calories, length(Alelager$Calories),replace = T)))
quantile(Alelager.bootstrap.ci, c(0.025, .975))
Alelager <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Alelager.csv")
cor(Alelager$Alcohol, Alelager$Calories)
n1 = length(Alelager$Alcohol)
n2 = length(Alelager$Calories)
Alesampler = function(){
cor(sample(Alelager$Alcohol, n1, replace = T),
sample(Alelager$Calories, n2, replace = T))
}
Alelager.bootstrap.ci = replicate(10000, Alesampler())
quantile(Alelager.bootstrap.ci, c(0.025, .975))
cor(Alelager$Calories,Alelager$Alcohol)
View(Alelager)
Alelager <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Alelager.csv")
cor(Alelager$Alcohol, Alelager$Calories)
n1 = length(Alelager$Alcohol)
n2 = length(Alelager$Calories)
Alesampler = function(){
cor(sample(Alelager$Alcohol, n1, replace = T),
sample(Alelager$Calories, n2, replace = T))
}
Alelager.bootstrap.ci = replicate(10000, Alesampler())
quantile(Alelager.bootstrap.ci, c(0.025, .975))
Q = matrix(c(0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1,0.1)3)
Q = matrix(c(0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1,0.1),3)
Q = matrix(c(0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1),3)
Q
?outer
outer(4*3)
outer(4,3)
part_b = lm(Weight~Gestation, data = NCBirths2004)
NCBirths2004 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/NCBirths2004.csv")
part_b = lm(Weight~Gestation, data = NCBirths2004)
summary(part_b)
(part_b)
?prop.test
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/final.rdata")
mean(problem1)
var(problem1)
View(handle.times)
Nevada = handle.times[handle.times$program=="Nevada",]
View(Nevada)
hist(Nevada)
hist(Nevada$time)
?sample
bootstrap.ne = replicate(10000, ne.sample())
Nevada = handle.times[handle.times$program=="Nevada","time"]
ne.sample = function(){
mean(sample(length(Nevada), length(Nevada), replace = T))
}
bootstrap.ne = replicate(10000, ne.sample())
quantile(bootstrap.ne, c(0.025,0.975))
mean(Nevada)
sd(Nevada)
?median
(mean(problem4)-median(problem4))/(sd(problem4))
Nevada = handle.times[handle.times$program=="Nevada","time"]
bootstrap.ne = replicate(10000, mean(sample(length(Nevada),
length(Nevada),
replace = T))
)
quantile(bootstrap.ne, c(0.025,0.975))
Nevada = handle.times[handle.times$program=="Nevada","time"]
bootstrap.ne = replicate(10000, mean(sample(Nevada,
length(Nevada),
replace = T)))
quantile(bootstrap.ne, c(0.025,0.975))
hist(bootstrap.ne)
bootstrap.p4 = function(){
p4 = sample(problem4, length(problem4), replace = T)
return((mean(p4)-median(p4))/(sd(p4)))
}
bootstrap.p4 = replicate(10000, bootstrap.p4())
quantile(bootstrap.p4, c(0.05, 0.95))
hist(problem4)
bootstrap.p4 = function(){
p4 = sample(problem4, length(problem4), replace = T)
return((mean(p4)-median(p4))/(sd(p4)))
}
bootstrap.p4b = replicate(10000, bootstrap.p4())
quantile(bootstrap.p4b, c(0.05, 0.95))
mean(bootstrap.p4b)-(mean(problem4)-median(problem4))/(sd(problem4))
?t.test
unique(handle.times$program)
t.test(handle.times[handle.times$program=="West Billing","time"], alternative = "less", mu = 540)
t.test(Nevada)
t.test(Nevada) ->aa
aa$conf.int
quantile(bootstrap.ne, c(0.025,0.975))
t.test(Nevada)conf.int
quantile(bootstrap.ne, c(0.025,0.975))
t.test(Nevada)$conf.int
unique(handle.times$program)
LD = handle.times[handle.times$program=="LD Care","time"]
WB = handle.times[handle.times$program=="Wild Blue","time"]
lw.bootstrap = replicate(10000, LD.WB())
LD = handle.times[handle.times$program=="LD Care","time"]
WB = handle.times[handle.times$program=="Wild Blue","time"]
LD.WB = function(){
l.sample = mean(sample(LD, length(LD), replace = T))
w.sample = mean(sample(WB, length(WB), replace = T))
return(l.sample-w.sample)
}
lw.bootstrap = replicate(10000, LD.WB())
quantile(lw.bootstrap, c(0.05,0.95))
